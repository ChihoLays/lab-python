#  Q1
def conint_bi(num):
    bi = ""
    while (num>0):
        remain = str(num%2)
        bi += remain
        num //= 2
    return bi
def conbi_int(bi):
    sum = 0
    for i in range(len(bi)):
        if bi[i] == '1':
            sum += (2**i)
    return sum

try:
    usin = int(input("Input an integer: "))
    if usin < 0:
        print("Error: The input is negative!")
    elif usin == 0:
        print("0")
    else:
        print(f"Binary -> Integer: {conint_bi(usin)}")
        print(f"Integer -> Binary: {conbi_int(conint_bi(usin))}")
except ValueError:
   print("Invalid input, please enter an integer.")
   
#  Q2
def alpha(usstr):
    alpha_list = []
    for i in usstr:
        if i not in alpha_list:
            alpha_list.append(i)
    return alpha_list
def count_str(alpha_list,usstr):
    count_list = [0] * len(apha_list)
    for i in range(len(apha_list)):
        for j in usstr:
            if apha_list[i] == j:
                count_list[i] += 1
    return count_list
def percent_str(count_list,str_len):
    per_list = []
    for i in count_list:
        per_list.append((i/str_len)*100)
    return per_list

try:
    usstr = input("Enter some text: ")
    if usstr.isdigit():
        raise TypeError("Error: This is not a text.")
    else:
        if not usstr.isalpha():
            raise TypeError("Error: Invalid input.")
    apha_list = alpha(usstr)
    per_list = percent_str(count_str(apha_list, usstr), len(usstr))
    print("-- Character Frequency Table -")
    print("char percentage (character count / string length)")
    for i in range(len(apha_list)):
        print(f"{apha_list[i]}\t {per_list[i]:5.2f}%")
except Exception as err:
    print(err)
    
#  Q3
from turtle import *
def alpha(usstr):
    alpha_list = []
    for i in usstr:
        if i not in alpha_list:
            alpha_list.append(i)
    return alpha_list
def count_str(alpha_list,usstr):
    count_list = [0] * len(apha_list)
    for i in range(len(apha_list)):
        for j in usstr:
            if apha_list[i] == j:
                count_list[i] += 1
    return count_list
def percent_str(count_list,str_len):
    per_list = []
    for i in count_list:
        per_list.append((i/str_len)*100)
    return per_list
def draw_rec(n):
    left(90)
    for i in range(2):
        fd(n*20)
        right(90)
        fd(10)
        right(90)
    setheading(0)

def draw_graph(count_list,apha_list):
    speed(0)
    left(90)
    fd(max(count_list)*20)
    fd(20)
    stamp()
    fd((-max(count_list)*20)-20)
    right(90)
    for i in range(len(count_list)):
        fd(20)
        draw_rec(count_list[i])
        fd(10)
    fd(20)
    stamp()
    penup() #write each character
    goto(0,0)
    setheading(0)
    right(90)
    fd(20)
    right(-90)
    for i in range(len(apha_list)):
        fd(20)
        pendown()
        write(apha_list[i],font=("Arial", 14, "normal"))
        penup()
        fd(10)
    goto(9999,0) # hide cursor
    done()


try:
    usstr = input("Enter some text: ")
    if usstr.isdigit():
        raise TypeError("Error: This is not a text.")
    else:
        if not usstr.isalpha():
            raise TypeError("Error: Invalid input.")
    apha_list = alpha(usstr)
    per_list = percent_str(count_str(apha_list, usstr), len(usstr))
    draw_graph(count_str(apha_list, usstr),apha_list)
except Exception as err:
    print(err)

#  Q4
usstr = input("Enter the first 9 digits of an ISBN-10 as a string: ")
if len(usstr) < 9:
    print("You enter less than 9 digit")
elif len(usstr) > 9:
    print("You enter more than 9 digit")
elif not usstr.isdigit():
    print("Invalid input.")
else:
    d10 = 0
    for i in range(9):
        d10 += int(usstr[i]) * (i+1)
    d10 %= 11
    if d10 == 10:
        d10 = "X"
    usstr += str(d10)
    print(f"\nYour ISBN-10 number is {usstr}")
