#Q1
class Clock:
    def __init__(self,hr,min,sec):
        if sec >= 60:
            min += sec // 60
            sec %= 60
        self.sec = sec
        if min >= 60:
            hr += min // 60
            min %= 60
        self.min = min
        if hr >= 24:
            hr %= 24
        self.hr = hr
    def set(self,new_hr,new_min,new_sec):
        if new_sec >= 60:
            new_min += new_sec // 60
            new_sec %= 60
        if new_sec >= 60:
            new_min += new_sec // 60
            new_sec %= 60
        self.sec = new_sec
        if new_min >= 60:
            new_hr += new_min // 60
            new_min %= 60
        self.min = new_min
        if new_hr >= 24:
            new_hr %= 24
        self.hr = new_hr
    def getTime(self):
        return f"{self.hr}:{self.min}:{self.sec}"
    def tick(self):
        self.set(self.hr,self.min,self.sec+1)
    def display(self):
        if self.hr > 12:
            print(f"{self.hr % 24}:{self.min}:{self.sec} pm")
        elif self.hr <= 12:
            print(f"{self.hr % 24}:{self.min}:{self.sec} am")

clock_test = Clock(34, 61, 59)
clock_test2 = Clock(47, 59, 59)
print(clock_test.getTime())
clock_test.display()
clock_test.tick()
clock_test.display()
clock_test2.display()
clock_test2.tick()
clock_test2.display()

#Finished
#Q2
class Poly:
    def __init__(self,tup):
        self.poly = tup
    def add(self,p):
        if len(p.poly) > len(self.poly):
            poly = list(p.poly)
            for i in range(len(self.poly)):
                poly[i] += self.poly[i]
        else:
            poly = list(self.poly)
            for i in range(len(p.poly)):
                poly[i] += p.poly[i]
        return Poly(tuple(poly))
    def scalar_multiply(self,n):
        poly = list(self.poly)
        for i in range(len(poly)):
            poly[i] *= n
        return Poly(tuple(poly))
    def multiply(self, p):
        product = [0] * (len(p.poly) + len(self.poly))
        for i in range(len(self.poly)):
            for j in range(len(p.poly)):
                product[i + j] += self.poly[i] * p.poly[j]
        return Poly(tuple(product))
    def power(self, n):
        if n == 0:
            return Poly(tuple([1]))  # Because x^0 = 1
        elif n == 1:
            return Poly(self.poly)  # Because x^1 = x
        else:
            initial_tu =  Poly(self.poly)
            temp1 = Poly(self.poly)
            for i in range(n-1):
                temp2 = initial_tu.multiply(temp1)
                temp1 = temp2
            return Poly(tuple(temp2.poly))
    def diff(self):
        poly = list(self.poly)
        for i in range(len(poly)):
            poly[i] *= i
        del poly[0]
        return Poly(tuple(poly))
    def integrate(self):
        poly = list(self.poly)
        poly.insert(0,0)
        for i in range(len(poly)):
            if i != 0:
                poly[i] /= i  # intentionally allow the number to be float
        return Poly(tuple(poly))
    def eval(self,n):
        sum = 0
        for i in range(len(self.poly)):
            sum += (self.poly[i]*(n**i))
        return sum
    def print(self):
        count = 0
        for i in range(len(self.poly)):
            if i == 0 and count == 0:
                if self.poly[i] != 0:
                    print(f"{self.poly[i]} ",end="")
                    count += 1
            else:
                if count == 0 and self.poly[i] != 0:
                    if self.poly[i] == 1 and i == 1:
                        print(f"x ", end="")
                    elif self.poly[i] == 1:
                        print(f"x^{i} ", end="")
                    elif i == 1 and self.poly[i] != 1:
                        print(f"{self.poly[i]}x ", end="")
                    else:
                        print(f"{self.poly[i]}x^{i} ", end="")
                    count += 1
                elif self.poly[i] > 0:
                    if self.poly[i] == 1 and i == 1:
                        print(f"+ x ", end="")
                    elif self.poly[i] == 1:
                        print(f"+ x^{i} ", end="")
                    elif i == 1 and self.poly[i] != 1:
                        print(f"+ {self.poly[i]}x ", end="")
                    else:
                        print(f"+ {self.poly[i]}x^{i} ", end="")
                elif self.poly[i] < 0:
                    if self.poly[i] == -1 and i == 1:
                        print(f"- x ", end="")
                    elif self.poly[i] == -1:
                        print(f"- x^{i} ", end="")
                    elif i == 1 and self.poly[i] != 1:
                        print(f"- {abs(self.poly[i])}x ", end="")
                    else:
                        print(f"- {abs(self.poly[i])}x^{i} ", end="")

        print()

p = Poly((1,0,-2))
p.print()
print(p.eval(3))
q = p.power(2)
r = p.add(q)
q.print()
r = p.add(q)
r.print()
r = r.diff()
r.print()
r.integrate().print()
r.scalar_multiply(2).print()

#Q3
class LinearEquation:
    def __init__(self,a,b,e,c,d,f):
        self.__a = a
        self.__b = b
        self.__c = c
        self.__d = d
        self.__e = e
        self.__f = f
    def get_a(self):
        return self.__a
    def get_b(self):
        return self.__b
    def get_c(self):
        return self.__c
    def get_d(self):
        return self.__d
    def get_e(self):
        return self.__e
    def get_f(self):
        return self.__f
    def isSovable(self):
        if ((self.__a*self.__d)-(self.__b*self.__c)) == 0:
            return False
        return True
    def getX(self):
        if not self.isSovable():
            return None
        upper = (self.__e*self.__d)-(self.__b*self.__f)
        lower = (self.__a*self.__d)-(self.__b*self.__c)
        x = (upper/lower)
        return x
    def getY(self):
        if not self.isSovable():
            return None
        upper = (self.__a*self.__f)-(self.__e*self.__c)
        lower = (self.__a*self.__d)-(self.__b*self.__c)
        y = (upper/lower)
        return y

test = LinearEquation(2,1,5,1,4,34)
print(test.isSovable())
print(test.getX())
print(test.getY())


#Advanced 
from itertools import zip_longest


class Poly:
    def __init__(self, coef_Xs):
        self.coef_Xs = [eachOfCoef for eachOfCoef in coef_Xs]
        self.length = len(self.coef_Xs)

    def add(self, p):
        result = [sum(eachCouple) for eachCouple in zip_longest(self.coef_Xs, p.coef_Xs, fillvalue=0)]
        return Poly(tuple(result))

    def scalar_multiply(self, n):
        scalarMultiply = [eachnum * n for eachnum in self.coef_Xs]
        return Poly(tuple(scalarMultiply))

    def multiply(self, p):
        resultLength = self.length + p.length
        results = [0 for element in range(resultLength)]
        for index_Self, eachSelf in enumerate(self.coef_Xs):
            for index_p, eachP in enumerate(p.coef_Xs):
                results[index_Self + index_p] += eachSelf * eachP
        return Poly(tuple(results))

    def power(self, n):
        result = self
        for multiply_itself in range(n - 1):
            result = result.multiply(self)
        return result

    def diff(self):
        resultLength = self.length - 1
        results = [0 for element in range(resultLength)]
        for index_Self, eachSelf in enumerate(self.coef_Xs):
            if index_Self != 0:
                results[index_Self - 1] = index_Self * eachSelf
        return Poly(tuple(results))

    def integrate(self):
        resultLength = self.length + 1
        results = [0 for element in range(resultLength)]
        for index_Self, eachSelf in enumerate(self.coef_Xs):
            results[index_Self + 1] = (eachSelf / (index_Self + 1))
        return Poly(tuple(results))

    def eval(self, n):
        result = 0
        for index_Self, eachSelf in enumerate(self.coef_Xs):
            result += eachSelf * pow(n, index_Self)
        return result

    def print(self):
        result = ""
        for index_Self, eachSelf in enumerate(self.coef_Xs):
            if eachSelf != 0:
                if index_Self == 0:
                    result += f"{eachSelf}"

                elif index_Self == 1:
                    if eachSelf < 0:
                        result += f" {eachSelf}x"
                    else:
                        result += f" +{eachSelf}x"
                else:
                    if eachSelf < 0:
                        result += f" {eachSelf}x^{index_Self}"
                    else:
                        result += f" +{eachSelf}x^{index_Self}"
        print(result)


test = Poly((14,7,-5,0,0,18))
test.print()
p = Poly((1, 0, -2))
p.print()
q = p.power(2)
q.print()
value = p.eval(3)
print(value)
r = p.add(q)
r.print()
r.diff().print()
b = r.diff()
b.integrate().print()
