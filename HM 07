#Q1
class Clock:
    def __init__(self,hr,min,sec):
        if sec >= 60:
            min += sec // 60
            sec %= 60
        self.sec = sec
        if min >= 60:
            hr += min // 60
            min %= 60
        self.min = min
        if hr >= 24:
            hr %= 24
        self.hr = hr
    def set(self,new_hr,new_min,new_sec):
        if new_sec >= 60:
            new_min += new_sec // 60
            new_sec %= 60
        if new_sec >= 60:
            new_min += new_sec // 60
            new_sec %= 60
        self.sec = new_sec
        if new_min >= 60:
            new_hr += new_min // 60
            new_min %= 60
        self.min = new_min
        if new_hr >= 24:
            new_hr %= 24
        self.hr = new_hr
    def get(self):
        return f"{self.hr}:{self.min}:{self.sec}"
    def tick(self):
        self.sec += 1
        if self.sec >= 60:
            self.min += self.sec // 60
            self.sec %= 60
        if self.min >= 60:
            self.hr += self.min // 60
            self.min %= 60
        if self.hr >= 24:
            self.hr %= 24
    def display(self):
        if self.hr > 12:
            print(f"{self.hr % 24}:{self.min}:{self.sec} pm")
        elif self.hr <= 12:
            print(f"{self.hr % 24}:{self.min}:{self.sec} am")

clock_test = Clock(34,61,59)
clock_test.display()
clock_test.tick()
clock_test.display()

#Finished
#Q2
class Poly:
    def __init__(self,tup):
        self.poly = tup
    def add(self,p):
        if len(p.poly) > len(self.poly):
            poly = list(p.poly)
            for i in range(len(self.poly)):
                poly[i] += self.poly[i]
        else:
            poly = list(self.poly)
            for i in range(len(p.poly)):
                poly[i] += p.poly[i]
        return Poly(tuple(poly))
    def scalar_multiply(self,n):
        poly = list(self.poly)
        for i in range(len(poly)):
            poly[i] *= n
        return tuple(poly)
    def multiply(self, p):
        product = [0] * (len(p.poly) + len(self.poly))
        for i in range(len(self.poly)):
            for j in range(len(p.poly)):
                product[i + j] += self.poly[i] * p.poly[j]
        return tuple(product)
    def power(self, n):
        if n == 0:
            return Poly(tuple([1]))  # Because x^0 = 1
        elif n == 1:
            return Poly(self.poly)  # Because x^1 = x
        else:
            initial_tu =  self.poly
            temp1 = self.poly
            for i in range(n-1):
                temp2 = Poly(initial_tu).multiply(Poly(temp1))
                temp1 = temp2
            return Poly(tuple(temp2))
    def diff(self):
        poly = list(self.poly)
        for i in range(len(poly)):
            poly[i] *= i
        del poly[0]
        return Poly(tuple(poly))
    def integrate(self):
        poly = list(self.poly)
        poly.insert(0,0)
        for i in range(len(poly)):
            if i != 0:
                poly[i] /= i  # intentionally allow the number to be float
        return Poly(tuple(poly))
    def eval(self,n):
        sum = 0
        for i in range(len(self.poly)):
            sum += (self.poly[i]*(n**i))
        return sum
    def print(self):
        count = 0
        for i in range(len(self.poly)):
            if i == 0 and count == 0:
                if self.poly[i] != 0:
                    print(f"{self.poly[i]} ",end="")
                    count += 1
            else:
                if count == 0 and self.poly[i] != 0:
                    if self.poly[i] == 1 and i == 1:
                        print(f"x ", end="")
                    elif self.poly[i] == 1:
                        print(f"x^{i} ", end="")
                    elif i == 1 and self.poly[i] != 1:
                        print(f"{self.poly[i]}x ", end="")
                    else:
                        print(f"{self.poly[i]}x^{i} ", end="")
                    count += 1
                elif self.poly[i] > 0:
                    if self.poly[i] == 1 and i == 1:
                        print(f"+ x ", end="")
                    elif self.poly[i] == 1:
                        print(f"+ x^{i} ", end="")
                    elif i == 1 and self.poly[i] != 1:
                        print(f"+ {self.poly[i]}x ", end="")
                    else:
                        print(f"+ {self.poly[i]}x^{i} ", end="")
                elif self.poly[i] < 0:
                    if self.poly[i] == -1 and i == 1:
                        print(f"- x ", end="")
                    elif self.poly[i] == -1:
                        print(f"- x^{i} ", end="")
                    elif i == 1 and self.poly[i] != 1:
                        print(f"- {abs(self.poly[i])}x ", end="")
                    else:
                        print(f"- {abs(self.poly[i])}x^{i} ", end="")

        print()

p = Poly((1,0,-2))
p.print()
q = p.power(2)
q.print()
print(p.eval(3))
r = p.add(q)
r.print()
r.diff().print()
